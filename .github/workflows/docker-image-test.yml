name: Docker Image CI - Test

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    strategy:
      matrix:
        runner: ["ubuntu-latest", "self-hosted"]
    runs-on: ${{ matrix.runner }}
    permissions: write-all
    steps:
      - name: Generate timestamp for docker image tags
        id: gen_timestamp
        run: |
          echo "timestamp=$(date +%Y-%m-%d-%H-%M)" >> $GITHUB_OUTPUT
          # ${{ steps.gen_timestamp.outputs.timestamp }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=amd64-${{branch}}-${{ steps.gen_timestamp.outputs.timestamp }},enable=${{ startsWith(github.ref, 'refs/heads/') && matrix.runner == 'ubuntu-latest' }}
            type=raw,value=amd64-${{tag}},enable=${{ startsWith(github.ref, 'refs/tags/v') && matrix.runner == 'ubuntu-latest' }}
            type=raw,value=arm64-${{branch}}-${{ steps.gen_timestamp.outputs.timestamp }},enable=${{ startsWith(github.ref, 'refs/heads/') && matrix.runner != 'ubuntu-latest' }}
            type=raw,value=arm64-${{tag}},enable=${{ startsWith(github.ref, 'refs/tags/v') && matrix.runner != 'ubuntu-latest' }}
          labels: |
            maintainer=Vijay Gill
            org.opencontainers.image.title=WireGuard UI Plus
            org.opencontainers.image.description=A Dockerised UI to run and manage a WireGuard VPN in the same container.
            org.opencontainers.image.vendor=GillSoft Limited

      - name: Build and push Docker image (without cache)
        if: matrix.runner == 'ubuntu-latest'
        id: push_no_cache
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false

      - name: Build and push Docker image (with cache)
        if: matrix.runner == 'self-hosted'
        id: push_with_cache
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        if: matrix.runner == 'self-hosted'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache      
          # https://github.com/docker/build-push-action/issues/252
          # https://github.com/moby/buildkit/issues/1896
